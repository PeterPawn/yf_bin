#! /bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
#######################################################################################################
#                                                                                                     #
# generate YourFritz image (with generic name), containing the framework scripts                      #
#                                                                                                     #
###################################################################################################VER#
#                                                                                                     #
# create_YourFritz_framework_image, version 0.6                                                       #
#                                                                                                     #
# This script is a part of the YourFritz project from https://github.com/PeterPawn/YourFritz.         #
#                                                                                                     #
###################################################################################################CPY#
#                                                                                                     #
# Copyright (C) 2016-2019 P.Hämmerlein (peterpawn@yourfritz.de)                                       #
#                                                                                                     #
###################################################################################################LIC#
#                                                                                                     #
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU  #
# General Public License as published by the Free Software Foundation; either version 2 of the        #
# License, or (at your option) any later version.                                                     #
#                                                                                                     #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without   #
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      #
# General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more details.             #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# constants                                                                                           #
#                                                                                                     #
#######################################################################################################
project="${YF_PROJECT_NAME:-YourFritz}"
marker="framework"
image="$project-$marker"
yourfritz="$GITHOME/YourFritz"
sign_image="$yourfritz/signimage/sign_image"
check_signed_image="$yourfritz/signimage/check_signed_image"
get_features_script="$yourfritz/framework/get_feature_list"
database="$yourfritz/framework/feature_database.xml"
schema="$yourfritz/framework/feature_database.xsd"
packages="$GITHOME/yf_bin/packages"
add_license="$yourfritz/LICENSE"
add_info="$packages/README.md"
__bold__="$(printf "\033[1m")"
__undl__="$(printf "\033[4m")"
__red__="$(printf "\033[1m\033[31m")"
__gren__="$(printf "\033[1m\033[32m")"
__yllw__="$(printf "\033[1m\033[33m")"
__blue__="$(printf "\033[1m\033[34m")"
__rset__="$(printf "\033[0m")"
__bold() { printf "$__bold__"; printf -- "$@"; printf "$__rset__"; }
__undl() { printf "$__undl__"; printf -- "$@"; printf "$__rset__"; }
__yourfritz__="$(printf "\033[0m\033[36mY\\033[0m\033[1mour\033[0m\033[36mF\033[0m\033[1mritz\033[0m")"
#######################################################################################################
#                                                                                                     #
# subfunctions                                                                                        #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# usage screen                                                                                        #
#                                                                                                     #
#######################################################################################################
usage()
{
	printf -- "Create an image for %s users, containing the basic framework scripts.\n\n" "$__yourfritz__"
	printf -- "Copyright (C) 2016-2019 P.Hämmerlein (peterpawn@yourfritz.de)\n\n"
	printf -- "Usage:\n\n"
	printf -- "%s\n\n" "$(__bold "$0")"
}
#######################################################################################################
#                                                                                                     #
# files to include into image and their source locations                                              #
#                                                                                                     #
#######################################################################################################
get_files_to_copy()
{
	cat << END_OF_LIST
bin/implant_public_key=$yourfritz/framework/implant_public_key
bin/unpack_squashfs=$yourfritz/framework/unpack_squashfs
bin/pack_squashfs=$yourfritz/framework/pack_squashfs
END_OF_LIST
}
#######################################################################################################
#                                                                                                     #
# directories to create and include in the new image                                                  #
#                                                                                                     #
#######################################################################################################
get_directories()
{
	cat << END_OF_LIST
bin
END_OF_LIST
}
#######################################################################################################
#                                                                                                     #
# prepare working directory                                                                           #
#                                                                                                     #
#######################################################################################################
tmp="${TMPDIR:-/tmp}"
tmpdir="$tmp/${0##*/}"
stage="$tmpdir/stage"
stage_var="$tmpdir/var"
mkdir -p "$stage_var" 2>/dev/null
get_directories | \
while read dir; do
	mkdir -p "$stage/$dir" 2>/dev/null
done
#######################################################################################################
#                                                                                                     #
# file staging                                                                                        #
#                                                                                                     #
#######################################################################################################
error=0
while read line; do
	dst="$(expr "$line" : "\([^=]*\).*")"
	src="$(expr "$line" : ".*=\(.*\)")"
	if [ -f "$target_bin/$src" ]; then
		cp -a -L "$target_bin/$src" "$stage/$dst" 2>/dev/null
		sudo chown root:root "$stage/$dst" 2>/dev/null
	else
		printf "%sMissing source file '%s'.%s\n\a" "$__red__" "$__rset__$__bold__$target_bin/$src$__red__" "$__rset__" 1>&2
		error=1
	fi
done < <(get_files_to_copy "$arch" "$kernel")
[ $error -ne 0 ] && exit 1
#######################################################################################################
#                                                                                                     #
# create tarball as image content and include an installation script                                  #
#                                                                                                     #
#######################################################################################################
busybox tar -c -z -f "$stage_var/$image.tar.gz" -C "$stage" $(get_directories)
cat > "$stage_var/install" << END_OF_VAR_INSTALL
#! /bin/sh
basedir="/var/$project"
mkdir -p "\$basedir"
gunzip -c "/var/packet/var/$image.tar.gz" | tar -x -C "\$basedir"
touch "\$basedir/.${marker}_installed"
END_OF_VAR_INSTALL
chmod 555 "$stage_var/install" 2>/dev/null
sudo chown root:root "$stage_var/install" 2>/dev/null
#######################################################################################################
#                                                                                                     #
# add information file and license, if needed                                                         #
#                                                                                                     #
#######################################################################################################
if [ -n "$add_license" ]; then
	cp -a -L "$add_license" "$stage_var"
	chmod 444 "$stage_var/${add_license##*/}" 2>/dev/null
	sudo chown root:root "$stage_var/${add_license##*/}" 2>/dev/null
fi
if [ -n "$add_info" ]; then
	cp -a -L "$add_info" "$stage_var"
	chmod 444 "$stage_var/${add_info##*/}" 2>/dev/null
	sudo chown root:root "$stage_var/${add_info##*/}" 2>/dev/null
fi
#######################################################################################################
#                                                                                                     #
# add description file                                                                                #
#                                                                                                     #
#######################################################################################################
cat > "$stage_var/content.txt" << END_OF_DESC
Project: $project
Path: /var/$project
Component: $marker
Copyright: (C) 2016-2019 Peter Haemmerlein (peterpawn@yourfritz.de)
License: see ${add_license##*/} file
Content:
END_OF_DESC
while read line; do
	dst="$(expr "$line" : "\([^=]*\).*")"
	printf "%s\n" "$dst" >> "$stage_var/content.txt"
done < <(get_files_to_copy . .)
chmod 444 "$stage_var/content.txt" 2>/dev/null
sudo chown root:root "$stage_var/content.txt" 2>/dev/null
#######################################################################################################
#                                                                                                     #
# create unsigned image and sign it with the YourFritz key                                            #
#                                                                                                     #
#######################################################################################################
busybox tar -c -f "$tmpdir/$image.image.unsigned" -C "$tmpdir" ./var
name_prefix="$HOME/$project" YF_SIGNIMAGE_TAR="busybox tar" "$sign_image" "$tmpdir/$image.image.unsigned" "${SIGNIMAGE_PASSWORD}" > "$packages/$image.image"
sign_rc=$?
#######################################################################################################
#                                                                                                     #
# remove temporary files                                                                              #
#                                                                                                     #
#######################################################################################################
rm -r "$tmpdir" 2>/dev/null
#######################################################################################################
#                                                                                                     #
# verify signature, if signing process was successful                                                 #
#                                                                                                     #
#######################################################################################################
[ $sign_rc -eq 0 ] && "$check_signed_image" "$packages/$image.image" -a "$HOME/$project.asc"
#######################################################################################################
#                                                                                                     #
# finish and regular exit                                                                             #
#                                                                                                     #
#######################################################################################################
exit $sign_rc
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
