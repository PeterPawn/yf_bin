#! /bin/sh
table()
{
	copies()
	{
		local d=$1 i=$2
		while [ $i -gt 0 ]; do
			printf "%s" "$d"
			i=$(( i - 1 ))
		done
	}
	row()
	{
		local i=1 show="" valname val len colname alignname align
		while [ $i -le $column_count ]; do
			eval valname=COL${i}
			eval colname=column_${i}_len
			eval alignname=column_${i}_align
			eval val=\$$valname
			eval len=\$$colname
			eval align=\$$alignname
			if [ ${#val} -lt $len ]; then
				if [ "$align" = "R" ]; then
					val="$(copies " " $(( $len - ${#val} )))$val"
				elif [ "$align" = "C" ]; then
					val="$(copies " " $(( ( $len - ${#val} ) / 2 )))$val"
					val="$val$(copies " " $(( $len - ${#val} )))"
				else
					val="$val$(copies " " $(( $len - ${#val} )))"
				fi
			fi
			show="${show}| $val "
			i=$(( i + 1 ))
		done
		show="${show}|"
		printf "$show\n"
	}
	if [ ${#1} -eq 0 ]; then
		op="empty"
	else
		op="$1"
		shift
	fi
	case "$op" in
		init)
			rm $td/lines $td/columns 2>/dev/null
			return 0
			;;
		empty)
			printf "EMPTY\n" >>$td/lines
			return 0
			;;
		outside)
			printf "OUTSIDE=\"%s\"\n" "$*" >>$td/lines
			return 0
			;;
		columns)
			cols=$(cat $td/columns 2>/dev/null | wc -l)
			if [ $cols -gt 0 ]; then
				return 1
			else
				while [ ${#1} -gt 0 ]; do
					expr index ':' "$1" 2>&1 1>/dev/null
					if [ $? -eq 0 ]; then
						name="${1%%:*}"
						align="${1##*:}"
					else
						name="$1"
						align=L
					fi
					printf "NAME=\"%s\" LEN=%u ALIGN=%s\n" "$name" "${#name}" "$align" >>$td/columns
					shift
				done
				return 0
			fi
			;;
		header)
			printf "HEADER\n" >>$td/lines
			return 0
			;;
		repeatheader)
			printf "REPEATHEADER\n" >>$td/lines
			return 0
			;;
		delimiter)
			printf "DELIMITER\n" >>$td/lines
			return 0
			;;
		footer)
			printf "FOOTER\n" >>$td/lines
			return 0
			;;
		row)
			i=0
			line=""
			while [ ${#1} -gt 0 ]; do
				i=$(( i + 1 ))
				line="${line}COL$i=\"$1\" "
				eval $(sed -n -e "${i}p" $td/columns)
				if [ ${#1} -gt $LEN ]; then
					sed -i -e "${i}s/LEN=$LEN/LEN=${#1}/1" $td/columns
				fi
				shift
			done
			printf "$line\n" >>$td/lines
			return 0
			;;
		output)
			i=0
			headline=""
			while read line; do
				i=$(( i + 1 ))
				eval $line
				eval "column_${i}_name=\"$NAME\""
				eval "column_${i}_len=\"$LEN\""
				eval "column_${i}_align=\"$ALIGN\""
				headline="$headline COL${i}=\"$NAME\""
			done <$td/columns
			column_count=$i
			while read line; do
				if [ "${line:0:5}" = "EMPTY" ]; then
					printf "\n"
				elif [ "${line:0:6}" = "HEADER" ]; then
					delimiter=""
					i=1
					while [ $i -le $column_count ]; do
						eval "len=\${column_${i}_len} value=\"\${column_${i}_name}\""
						delimiter="${delimiter}+$(copies - $(( $len + 2 )))"
						i=$(( i + 1 ))
					done
					delimiter="${delimiter}+"
					printf "$delimiter\n"
					eval "$headline"
					row
					printf "$delimiter\n"
					footer="$delimiter"
				elif [ "${line:0:12}" = "REPEATHEADER" ]; then
					printf "$delimiter\n"
					eval "$headline"
					row
					printf "$delimiter\n"
				elif [ "${line:0:9}" = "DELIMITER" ]; then
					printf "$delimiter\n"
				elif [ "${line:0:6}" = "FOOTER" ]; then
					printf "$delimiter\n"
				elif [ "${line:0:7}" = "OUTSIDE" ]; then
					unset COL1 COL2 COL3 COL4 COL5 COL6 COL7 COL8 COL9 COL10
					eval "$line"
					printf "$OUTSIDE\n"
				elif [ "${line:0:3}" = "COL" ]; then
					unset COL1 COL2 COL3 COL4 COL5 COL6 COL7 COL8 COL9 COL10
					eval "$line"
					row
				fi
			done <$td/lines
			return 0
			;;
		*)
			return 1
			;;
	esac
}
display()
{
	table init
	table outside "TFFS content listing"
	table outside "===================="
	table outside "TFFS major device ID : $major"
	table outside "TFFS storage type    : $type"
	table outside "TFFS MTD partition(s): $parts"
	table outside "TFFS size            : $size KByte ($space Byte)"
	table outside "TFFS fill level      : $fill %%"
	table empty
	table columns "minor:R" "hex:R" "size:R" "visible:C" "name" "comment"
	table header 
	for minor in $(seq 0 255); do
		printf "\rProcessing minor $minor of 255 ..." 1>&2
		mknod $td/cdev c $major $minor
		checkempty $td/cdev >/dev/null 2>&1
		empty=$?
		if [ $empty -eq 1 ]; then
			fsize=$(cat $td/cdev | wc -c)
		else
			fsize=0
		fi
		used=$(( used + fsize ))
		line=$(grep "^$minor " $mydir/tlist.files 2>/dev/null)
		if [ -n "$line" ]; then
			comment=$(printf "$line\n" | sed -n -e 's/^[^ ]* [^ ]* *\(.*\)$/\1/p')
			if [ -z "$comment" ]; then
				name=$(printf "$line\n" | sed -n -e 's/^[^ ]* \(.*\)/\1/p')
			else
				name=$(printf "$line\n" | sed -n -e 's/^[^ ]* \([^ ]*\) *.*$/\1/p')
			fi
		else
			name=""
			comment=""
		fi
		grep -q "^$minor " $td/visible_names && vis=yes || vis=no
		if [ "$vis" = "yes" ] && [ -z "$name" ]; then
			name="$(sed -n -e "s|^$minor \(.*\)|\1|p" $td/visible_names)"
		fi
		len=$(printf "$minor\t$fsize\t$vis\t$name" | wc -c)
		table row "$minor" $(printf "0x%02X" $minor) "$fsize" "$vis" "$name" "$comment"
		rm $td/cdev
		if [ $(( minor % 64 )) -eq 63 ]; then
			table repeatheader
		elif [ $minor -eq 99 ]; then
			table delimiter
		fi
	done
	printf "\r\x1B[0KPreparing output table ..." 1>&2
	table empty
	table outside "Cumulated file sizes : $used"
	table output
}
myself=$(realpath $0)
myname=${myself##*/}
mydir=${myself%/*}
td=/var/tmp/tfls_$$_$(date +%s)
mkdir -p $td || exit 1
#printf "cleanup\n" >/proc/tffs
printf "info\n" >/proc/tffs
major=$(sed -n -e "s|^ *\([0-9]\{1,3\}\) tffs\$|\1|p" /proc/devices)
if [ ${#major} -eq 0 ]; then
	printf "\r\x1B[0KUnable to find the major device ID for TFFS driver.\n" 1>&2
	exit 1
fi
mtd=$(sed -n -e 's/^mount=\(.*\)/\1/p' /proc/tffs | sed -n -e ':x;N;$!bx;s/\n/ /p')
if [ ${#mtd} -gt 0 ]; then
	type=spi
	set -- $mtd
	mtd_a=$1
	mtd_b=$2
	mtd_a_num=$(printf $mtd_a | sed -n -e 's/^mtd\(.*\)/\1/p')
	size=$(sed -n -e "s/^ .* .* \(.*\) mtdblock$mtd_a_num\$/\1/p" /proc/partitions)
	space=$(( size * 1024 ))
	parts="$mtd_a/$mtd_b"
else
	mtd=$(sed -n -e "s/^\([^:]*\):.*tffs.*/\1/p" /proc/mtd)
	if [ ${#mtd} -gt 0 ]; then
		type=nand
		size=$(sed -n -e "s/^$mtd: \([0-9a-f]*\).*nand-tffs.*/\1/p" /proc/mtd)
		space=$(( 0x$size ))
		size=$(( 0x$size / 1024 ))
		parts="$mtd"
	else
		type=unknown
	fi
fi
fill=$(sed -n -e 's/^fill=\(.*\)/\1/p' /proc/tffs)
used=0
touch $td/vnames
popd=$(pwd)
cd /var/flash
for file in $(ls -d *); do
	if [ -c $file ]; then
		eval "minor=\$((0x$(stat -c %T $file)))"
		printf "$minor $file\n" >>$td/vnames
	fi
done
cd $popd
sort -n $td/vnames >$td/visible_names
display >$td/display
vi -R $td/display
rm -r $td
